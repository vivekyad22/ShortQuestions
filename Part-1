# ShortQuestions
Exec

Request for pick by channel with reference number 54197 has been submitted successfully. We'll call you within 24hrs180
18002744744


1.  execWhen referring to a command line such as Linux or Unix, exec is a BOURNE and POSIX shell command that replaces the current shell process with the command specified after exec. This command does not create a new PID. For example, if you were to run exec <command>, the shell would be replaced by that command. When that command is exited, the shell will exit.

set redirections for the program to execute or for the current shell

The >& outputfile operator is shorthand for > outputfile 2>&1.

tee is normally used to split the output of a program so that it can be both displayed and saved in a file. The command can be used to capture intermediate output before the data is altered by another command or program. The tee command reads standard input, then writes its content to standard output. It simultaneously copies the result into the specified file(s) or variables. The syntax differs depending on the command's implementation:



Find mtime , ctime , atime 
find PATH -iname "$PATTERN"
Find Last 50-100 Days Modified Files
To find all the files which are modified more than 50 days back and less than 100 days.
# find / -mtime +50 –mtime -100
Find Modified Files in Last 1 Hour
To find all the files which are modified in last 1 hour.
# find / -mmin -60

InnoDB vs MyISAM ( Referential integrity & Transactions )
---------------------------------
MYISAM ::---
MYISAM supports Table-level Locking .
MyISAM designed for need of speed .
MyISAM does not support foreign keys hence we call MySQL with MYISAM is DBMS 
MYISAM not supports transaction. You cannot commit and rollback with MYISAM. Once you issue a command it’s done.
You can use MyISAM, if the table is more static with lots of select and less update and delete.

INNODB::---
InnoDB supports Row-level Locking
InnoDB designed for maximum performance when processing high volume of data
InnoDB support foreign keys hence we call MySQL with InnoDB is RDBMS
InnoDB supports transaction. You can commit and rollback with InnoDB

NAGIOS
----------------------------------------------------
Install nagios
Install nagios plugins
INstall NRPE

Nagios configuration file( Define remote servers,) 
/usr/local/nagios/etc/nagios.cfg 

Nagios remote server template file, defining services
/usr/local/nagios/etc/servers/yourhost.cfg

Nagios Contacts file 
/usr/local/nagios/etc/objects/contacts.cfg

Nagios command file 
/usr/local/nagios/etc/objects/commands.cfg

Remote host nrpe file
/etc/nagios/nrpe.cfg

REPOSITORIES
--------------------------------------------------------
Main - Officially supported software.
Restricted - Supported software that is not available under a completely free license.
Universe - Community maintained software, i.e. not officially supported software.
Multiverse - Software that is not free.

/etc/yum.d/example.repo
LAN -  http , ftp , file 


To replace configuration files that have been deleted, without purging the package, you can do

sudo apt-get -o DPkg::Options::="--force-confmiss" --reinstall install apache2
To fully remove the apache2 config files, you should

sudo apt-get purge apache2
which will then let you reinstall it in the usual way with

sudo apt-get install apache2
Purge is required to remove all the config files - if you delete the config files but only remove the package, then this is remembered & missing config files are not reinstalled by default.




The tool you want is lsof, which stands for list open files.

It has a lot of options, so check the man page, but if you want to see all open files under a directory:

lsof +D /path
That will recurse through the filesystem under /path, so beware doing it on large directory trees.

Once you know which processes have files open, you can exit those apps, or kill them with the kill(1) command.
You can use lsof or fuser to indentify which is using this directory, something like this:

# lsof +D /var/www/html


Now, what does this have to do with static and dynamic? Well, with a static library, the entire library is copied from /lib (or wherever it normally resides) inside your program, and the entire executable is spat out, with your code and the library code. With a dynamic library, however, the library is NOT copied. A reference to the library is included in your executable, but the actual library code is not. When you call a function in that library, the C runtime will see if the library you need exists on the current system. If it does, and it's not already in RAM, it will load it up and allow you to use anything defined in it.

Dynamic libraries have several benefits:
Smaller executable sizes
Less duplication - multiple programs that depend on the same library only need one copy for the whole system
Less RAM usage - the same library can be shared among different programs running at the same time


However, it also has some issues:
It is slightly slower, as all the linking must be done at runtime instead of compile time.
It must be able to find the library at runtime if it exists on the system. If it doesn't exist or can't be found, the program can't run.


The last point is the source of all of those "foo.dll could not be found" errors you used to get on Windows. .dll stands for "dynamically linking library".




Soft links are link to the file name and can reside on different filesytem as well; however hard links are link to the inode of the file and has to be on the same filesytem as that of the file. Deleting the orginal file makes the soft link inactive (broken link) but does not affect the hard link (Hard link will still access a copy of the file)

























